version: '3.8'

services:
  ticket_service:
    build:
      context: ./TicketService
      dockerfile: TicketService.Api/Dockerfile
    ports:
      - "7000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=local
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
    depends_on:
      - postgresql_database
      - kafka
    networks:
      - event_platform_network

  postgresql_database:
    image: postgres:15
    container_name: ticketservice.db
    environment:
      - POSTGRES_DB=TicketStoreDb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Passw0rd!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - event_platform_network

  kafka:
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - event_platform_network

  event_service:
    build:
      context: ./EventService
      dockerfile: EventService.Api/Dockerfile
    ports:
      - "8000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=local
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
    depends_on:
      - mongodb_database
    networks:
      - event_platform_network

  mongodb_database:
    image: mongo:latest
    container_name: eventservice.db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=Passw0rd!
      - MONGO_INITDB_DATABASE=EventStoreDb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - event_platform_network

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - event_platform_network

networks:
  event_platform_network:
    driver: bridge

volumes:
  postgres_data:
  mongodb-data:
  redis_data:
    driver: local